@model QuintessenceDataServer.Models.Item

@{
    ViewBag.Title = "Edit " + Model.Name;
    int? currentSlot = null;
    if (Model.Equipment != null) {
        currentSlot = Model.Equipment.Slot;
    }
}
<br />
<h2>@Model.Name</h2>

<div>
    <hr />
    <dl class="dl-horizontal">
    </dl>
</div>

<div class="container row">
    <div class="col col-lg-3">
        <div style="width:250px;height:250px; background-color: lightblue;"></div>
    </div>
    <div class="col" style="width:100%;">
        <h4>Base Item Information:</h4>
        <div class="col">
            <table class="table table-striped table-bordered">
                <tr>
                    <th class="col-lg-3">
                        Stack Size
                    </th>
                    <th>
                        Description
                    </th>
                </tr>
                <tr>
                    <td>
                        <input type="number" id="StackSize" min="0" class="form-control" value="@if (@Model.StackSize.HasValue) {WriteLiteral(Model.StackSize);}">
                    </td>
                    <td>
                        <input id="Description" class="form-control" style="width:100%;resize:none;max-width:9999px;" value="@Model.Description">
                    </td>
                </tr>
            </table>
        </div>
        <div class="col">
            <h4>Equipment:</h4>
            <table class="table table-striped table-bordered">
                <tr>
                    <th class="col-lg-3">
                        Slot
                    </th>
                    <th>
                        Sub Slots
                    </th>
                </tr>
                <tr>
                    <td>
                        Parent Slot
                        <select class="form-select form-select-sm" aria-label=".form-select-sm example" style="width:100%;" id="ParentSlot">
                            @foreach (QuintessenceDataServer.Models.Item.SlotEnumStruct current in QuintessenceDataServer.Models.Item.GetSlotEnum(null)) {
                                <option value="@current.SlotID" @if (Model.Equipment != null && @current.SlotID == Model.Equipment.ParentSlot) { WriteLiteral("selected"); }>@current.Name</option>
                            }
                        </select>
                        Slot
                        <select class="form-select form-select-sm" aria-label=".form-select-sm example" style="width:100%;" id="Slot">

                        </select>
                    </td>
                    <td >
                        <div class="row" id="AvaliableSlots">
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>
<div>
    <hr />
    <dl class="dl-horizontal">
    </dl>
</div>
<div class="container row">
    <div class="col">
        <h4>Tool Data</h4>
        <table class="table table-striped table-bordered table-hover">
            <tr>
                <th>
                    Tool Type
                </th>
                <th>
                    Tool Level
                </th>
                <th>
                    Efficiency
                </th>
                <th style="width: 100px;">
                    Is Modifier
                </th>
            </tr>
            @if (Model.Tools != null) {
                foreach (var tool in Model.Tools) {
                    <tr>
                        <td>
                            <input type="number" id="ToolType" min="0" class="form-control" value="0">

                        </td>
                        <td>
                            <input type="number" id="ToolLevel" min="0" class="form-control" value="0">

                        </td>
                        <td>
                            <input type="number" id="Efficiency" class="form-control" value="0">

                        </td>
                        <td onclick="checkSubbox(event)" class="text-center">
                            <input class="form-check-label" type="checkbox" id="IsModifier" checked>
                        </td>
                    </tr>
                }
            }
        </table>
    </div>
    <div class="col">
        <h4>Level Requirement Data</h4>
        <table class="table table-striped table-bordered table-hover">
            <tr>
                <th>
                    Skill
                </th>
                <th>
                    Level
                </th>
                <th style="width: 100px;">
                    Is Modifier
                </th>
            </tr>
            @if (Model.Skills != null) {
                foreach (var skill in Model.Skills) {
                    <tr>
                        <td>
                            @skill.Skill
                        </td>
                        <td>
                            @skill.Level
                        </td>
                        <td class="text-center">
                            @if (skill.IsModifier) {
                                WriteLiteral("&#10003");
                            }
                        </td>
                    </tr>
                }
            }
        </table>
    </div>
</div>

<p>
    <!-- @Html.ActionLink("Edit", "Edit", new { id = Model.ItemID }) |-->
    @Html.ActionLink("Back to List", "Index")
</p>
@section Scripts{
    <script>
    var ParentSlot = null;
    var Slot = null;
    var SubSlots = null;
    var ToolData = @Html.Raw(Model.GetToolsAsJson());
    var LevelData =@Html.Raw(Model.GetSkillsAsJson());
    @if (Model.Equipment != null) {
        if (Model.Equipment.ParentSlot.HasValue) {
            @:ParentSlot = @Model.Equipment.ParentSlot;
        }
        if (Model.Equipment.AvailableSlots.HasValue) {
            @:SubSlots=@Model.Equipment.AvailableSlots;
        }
        @:Slot = @Model.Equipment.Slot;
    }
    ParentSlot = $("#ParentSlot").val();
    fetchUpdatedSlots(false);
    $("#ParentSlot").change(fetchUpdatedSlots);
    $("#Slot").change(fetchUpdatedSubSlots);
    function checkSubbox(event) {
        $(event.target).children().each(function () {
            $(this).attr("checked", !$(this).attr("checked"));
        });
    }
    function fetchUpdatedSlots(update = true) {
        if (update) {
            ParentSlot = $("#ParentSlot").val();
            SubSlots = null;
        }
        $("#Slot").empty();
        $("#AvaliableSlots").empty();
        $.getJSON("../Slots/" + ParentSlot).done(function (json) {
            $.each(json, function (current) {
                $("#Slot").append(new Option(json[current]["Name"], json[current]["SlotID"], null, json[current]["SlotID"] == Slot));
            });
        });
        fetchUpdatedSubSlots(update);
    }
    function fetchUpdatedSubSlots(update = true) {
        if (ParentSlot == null || ParentSlot == 0) {
            if (update) {
                Slot = $("#Slot").val();
                SubSlots = null;
            }
            $.getJSON("../Slots/" + Slot).done(function (json) {
                $("#AvaliableSlots").empty();
                $.each(json, function (current) {
                    var newCol = document.createElement('div');
                    newCol.classList.add("col-3");
                    var label = document.createElement('label');
                    var input = document.createElement('input');
                    label.classList.add('form-check-label');
                    label.htmlFor = json[current]["SlotID"];
                    label.innerText = json[current]["Name"];
                    input.classList.add("form-check-input");
                    input.type = "checkbox";
                    input.value = json[current]["SlotID"];
                    input.checked = SubSlots & json[current]["SlotID"];
                    newCol.append(input);
                    newCol.append(label);
                    $("#AvaliableSlots").append(newCol );
                });
            });
        }
    }
    function fetchUpdatedToolData() {

    }
    </script>
}
